{{define "player"}}
{{template "header" . }}
<div class="box box-success">
    <div class="box-header with-border">
      <h3 class="box-title">Which media do you want to play?</h3>
      <div class="box-tools pull-right">
        <button id="media-list" type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
      </div>
    </div>
    <div class="box-body">
      <p>Select a top level folder that you're tracking</p>
      
      <div>
        {{range .Contents.Directories}}
        <a href="?open={{ . }}" class="btn btn-success">{{ . }}</a>
        {{end}}
      </div>

      <div class="box-body">
        {{range .Contents.SubFolders}}
        <a href="?open={{ . }}" class="btn btn-primary">{{ . }}</a>
        {{end}}
      </div>

      <div class="box-body">
        {{range .Contents.Files}}
        <a href="?play={{ .AbsPath }}&open={{ $.Contents.OpenParam }}" class="btn btn-lg"><span class="fa fa-play-circle"></span> {{ .Name }}{{ .Ext }}</a>
        {{end}}
      </div>

    </div>
</div>

<div class="box box-success">
  <div class="box-header with-border">
    <h3 class="box-title">Continue Watching</h3>
    <div class="box-tools pull-right">
      <button id="media-list" type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
    </div>
  </div>
  <div class="box-body">
    {{range .Contents.RecentlyPlayed}}
    <a href="?play={{ .File.AbsPath }}&open={{ .File.Path }}" class="btn btn-lg" style="margin-top:5px;"><span class="fa fa-play-circle"></span> {{ .Title }}</a>
    {{end}}
  </div>
</div>

{{ if .Contents.MediaInfo.File.Path }}
<div class="box box-success">
  <div class="box-header with-border">
    <h3 class="box-title wrap">Currently Watching <span id="currently-watching">{{ .Contents.MediaInfo.File.PrintName }}</span></h3>
    <div class="box-tools pull-right">
      <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
    </div>
  </div>
  
  <div class="box-body">    
    <video controls autoplay id="player" width="100%" src="/player/load?file={{ .Contents.MediaInfo.File.AbsPath }}#t={{ .Contents.MediaInfo.PlayTime }}">
      <track label="English subtitles" kind="subtitles" srclang="en" src="" default=""> 
      Your browser does not support the HTML5 Video element.
    </video>

  </div>
</div>

<script type="text/javascript">

  var url = "http://{{ .Contents.IP }}:{{ .Contents.Port }}";
  var wsurl = "{{ .Contents.IP }}:{{ .Contents.Port }}";

  var socket;

  var player = document.getElementById("player");
  var id = "{{ .Contents.MediaInfo.ID }}";
  var rewindAmount = 10;

  $(window).load(function() 
  {
      $("#media-list").click();
  });

  $("#player").bind("ended", function() {
     socket.send("control:skip")
  });

  openSocket(id);

  function openSocket(sid)
  {
      socket = new WebSocket("ws://" + wsurl + "/player/ws-setup/player?id=" + sid);

      // Incoming messages back to the player
      socket.onmessage = function(msg) 
      {
          if (msg.data.length > 0)
          {
              console.log("Player Received: " + msg.data)
              var commands = msg.data.split(":");

              for (let i = 0; i < commands.length; i += 3) 
              {
                  var type = commands[i];  // e.g., control
                  var key = commands[i+1]; // e.g, pause/play
                  var val = commands[i+2]; // e.g., 10

                  switch(key) {
                      case "play":
                            player.play();
                            break;
                      case "pause":
                            player.pause();
                            break;
                      case "rewind":
                            fastforward(-parseInt(val));
                            break;
                      case "fastforward":
                            fastforward(parseInt(val));
                            break;
                      case "skip-to":
                            skip(val);
                            socket.send("change-id:" + val);                
                            break;
                       case "media-info":
                            var mediaInfo = val.split(";");
                            $("#currently-watching").text(mediaInfo[1]);
                            break;
                  }
              }
          }
      };
  }

  function closeSocket()
  {
      socket.send("close-socket");
      socket.close();
  }
  
  window.setInterval(function()
  { 
      if (!player.paused)
      {
          console.log("Player (" + id + ") > " + "status:playback:" + player.currentTime);
          socket.send("status:playback:" + player.currentTime);
      }
  }, 10000);

  $(document).on("keydown", function (e) 
  {
      switch(e.key)
      { 
          case "ArrowLeft":
              fastforward(-parseInt(rewindAmount));
              break;
          case "ArrowRight":
              fastforward(parseInt(rewindAmount));
              break;
          case "ArrowUp":
              break;
          case "ArrowDown":
              break;
          case " ":
              if (player.paused)
                  player.play();
              else
                  player.pause();
              break;
          case "Enter":
                 socket.send("control:skip");
              break;
      } 
  });

  // Fast forward (or rewind) the player
  function fastforward(val)
  {
      player.currentTime = (player.currentTime + val);
  }

  // Skip to the next media
  function skip(nid)
  {
        console.log("shud skip to " + nid)
        // Stop the current media
        player.pause();
        player.setAttribute("src", "");
        player.load();

        id = nid;

        player.setAttribute("src", "/player/load?id=" + id + "#");
        player.load();
        player.play();
  }
  
  </script>
{{end}}
{{template "footer" . }}
{{end}}
