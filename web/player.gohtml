{{define "player"}}
{{template "header" . }}
<div class="box box-success">
    <div class="box-header with-border">
      <h3 class="box-title">Which media do you want to play?</h3>
      <div class="box-tools pull-right">
        <button id="media-list" type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
      </div>
    </div>
    <div class="box-body">
      <p>Select a top level folder that you're tracking</p>
      
      <div>
        {{range .Contents.Directories}}
        <a href="?open={{ .AbsPath }}" class="btn btn-success">{{ .AbsPath }}</a>
        {{end}}
      </div>

      <div class="box-body">
        {{range .Contents.SubFolders}}
        <a href="?open={{ .AbsPath }}" class="btn btn-primary">{{ .AbsPath }}</a>
        {{end}}
      </div>

      <div class="box-body">
        {{range .Contents.Files}}
        <a href="?play={{ .AbsPath }}&open={{ $.Contents.OpenParam }}" class="btn btn-lg"><span class="fa fa-play-circle"></span> {{ .FileName }}{{ .Ext }}</a>
        {{end}}
      </div>

      {{ if .Contents.SafeOpenParam }}
      <button id="ffmpeg-priority" class="btn btn-sm btn-warning pull-right">Prioritise FFMPEG Conversion</button>
      {{ end }}
    </div>
</div>

<div class="box box-success">
  <div class="box-header with-border">
    <h3 class="box-title">Continue Watching</h3>
    <div class="box-tools pull-right">
      <button id="continue-watching" type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
    </div>
  </div>
  <div class="box-body">
    {{range .Contents.RecentlyPlayed}}
    <a href="?play={{ .File.AbsPath }}&open={{ .File.Path }}" class="btn btn-lg" style="margin-top:5px;"><span class="fa fa-play-circle"></span> {{ .Title }}</a>
    {{end}}
  </div>
</div>

{{ if .Contents.PlayParam.AbsPath }}
<div class="box box-success">
  <div class="box-header with-border">
    <h3 class="box-title wrap">Currently Watching <span id="currently-watching">{{ .Contents.PlayParam.PrintName }}</span></h3>
    <h2>Device ID: {{ .Contents.DeviceID }}</h2>
    <div class="box-tools pull-right">
      <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
    </div>
  </div>
  
  <div class="box-body">    
    <!-- /player/load?id={{ .Contents.Playback.ID }}#t={{ .Contents.Playback.Playtime }} -->
    <video controls autoplay id="player" width="100%" src="">
      <track label="English subtitles" kind="subtitles" srclang="en" src="" default=""> 
      Your browser does not support the HTML5 Video element.
    </video>

  </div>
</div>

<script type="text/javascript">
  var wsurl = "{{ .Contents.IP }}:{{ .Contents.Port }}";
  var url = "http://" + wsurl;

  var socket = new WebSocket("ws://" + wsurl + "/player/ws-setup/player/{{ .Contents.DeviceID }}");

  var player = document.getElementById("player");
  var rewindAmount = 10;
  var pauseStatusPlayback = true;
  var loadedMedia = "{{ .Contents.SafePlayParam }}";

  // Once the socket opens, setup the media player
  socket.onopen = function(e) 
  {
      socket.send(JSON.stringify({
          Type: "control",
          Key: "change-media",
          Value: loadedMedia
      }));

      window.setInterval(function()
      { 
          if (!player.paused && !pauseStatusPlayback)
          {
              console.log("status:playback:" + player.currentTime);
              socket.send(JSON.stringify({
                  Type: "status",
                  Key: "playback",
                  Value: String(player.currentTime)
              }));
          }
      }, 10000);

      $("#media-list").click();
      $("#continue-watching").click();
  };

  // Incoming messages back to the player
  socket.onmessage = function(msg) 
  {
      if (msg.data.length > 0)
      {
          var response = JSON.parse(msg.data);
          console.log("Player Received: " + msg.data);

          switch(response.Key) 
          {
              case "play":
                    player.play();
                    break;
              case "pause":
                    player.pause();
                    break;
              case "rewind":
                    fastforward(-parseInt(val));
                    break;
              case "fastforward":
                    fastforward(parseInt(val));
                    break;
              case "change-media":
                    changeMedia(response.Playback.ID, response.Playback.Playtime);
                    var prefLoc = parseInt(response.Playback.PrefLoc);
                    $("#currently-watching").text(response.Playback.Locations[prefLoc].PrintName);
                    loadedMedia = response.Playback.Locations[prefLoc].AbsPath;
                    console.log("Loaded Media: " + loadedMedia);
                    break;
          }
      }
  };

  $(document).ready(function() 
  {
      $("#media-list").click();
  });

  $("#player").bind("ended", function() 
  {
      socket.send(JSON.stringify({
          Type: "control",
          Key: "skip"
      }));
  });

  // Key functions
  $(document).on("keydown", function (e) 
  {
      switch(e.key)
      { 
          case "ArrowLeft":
              fastforward(-parseInt(rewindAmount));
              break;
          case "ArrowRight":
              fastforward(parseInt(rewindAmount));
              break;
          case "ArrowUp":
              break;
          case "ArrowDown":
              break;
          case " ":
              if (player.paused)
                  player.play();
              else
                  player.pause();
              break;
          case "Enter":
                socket.send(JSON.stringify({
                    Type: "control",
                    Key: "skip",
                    Value: ""
                }));
              break;
      } 
  });

  // Fast forward (or rewind) the player
  function fastforward(val)
  {
      player.currentTime = (player.currentTime + val);
  }

  // Skip to the next media
  function changeMedia(id, playtime)
  {
        console.log("Changing media to: " + id)
        pauseStatusPlayback = true;
        // Stop the current media
        player.pause();
        player.setAttribute("src", "");
        player.load();

        player.setAttribute("src", "/player/load?id=" + id + "#t=" + playtime);
        player.load();
        player.play();
        pauseStatusPlayback = false;
  }
</script>
{{ end }}

<script type="text/javascript">
  $("#ffmpeg-priority").on("click", function(e)
  {
    $.ajax({
        url: "/player/ffmpeg/control",
        type: "get",
        data: { 
          type: "prioritise",
          prioritise: "{{ .Contents.SafeOpenParam }}"
        },
        success: function(response) {
         
        },
        error: function(xhr) {
         
        }
    });

    console.log("Priority");
  });
</script>
{{template "footer" . }}
{{end}}
