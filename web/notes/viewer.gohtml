{{define "viewer"}}
{{template "header" . }}

<div class="row-flex buffer-top">
    <div class="btn-group btn-group-toggle col-12" data-toggle="buttons">
        <label class="btn btn-secondary btn-sm">
          <input class="mode-checks" type="radio" name="options" id="read-mode" autocomplete="off" checked> Read Mode
        </label>
        <label class="btn btn-secondary btn-sm">
          <input class="mode-checks" type="radio" name="options" id="edit-mode" autocomplete="off"> Edit Mode
        </label>
    </div>
</div>

<div id="meta-elements" class="row-flex buffer-top">
    
</div>

<div id="note-elements" class="row-flex jumbotron jumbotron-flex">

</div>

<div id="tool-area" class="row-flex collapse">
    <h6>Add new page element</h6>
    <div class="btn-group" role="group">
        <button onclick="addTitle()" type="button" class="btn btn-secondary">Title</button>
        <button onclick="addTextPlain()" type="button" class="btn btn-secondary">Text</button>
        <button type="button" class="btn btn-secondary">Image</button>
        <button type="button" class="btn btn-secondary">File</button>
        <button onclick="addLink()" type="button" class="btn btn-secondary">Link</button>
    </div>

    <div class="btn-group" role="group">
        <button onclick="save()" type="button" class="btn btn-success">Save</button>
    </div>

    <div class="btn-group" role="group">
        <button onclick="del()" type="button" class="btn btn-danger">Delete</button>
    </div>

</div>

<script type="text/javascript" src="/notes/js/elements.js"></script>
<script type="text/javascript" src="/notes/js/server.js"></script>

<script type="text/javascript">

var mode = "read"; // or edit
var note = JSON.parse(`{{ .Contents.NoteJson }}`);
var keywords = JSON.parse(`{{ .Contents.Keywords }}`);

console.log(note);
console.log(keywords);

$(window).on('load', function() 
{
    processElements();

    $(".mode-checks:radio").change(function() 
    {
        processMode();
        processElements();
    });

    processMode();
});

function processElements()
{
    $("#meta-elements").empty();
    $("#note-elements").empty();

    addKeyword(note.Keyword);
    addDescription(note.Desc);

    if (note.ID == 0)
        return;

    for (var i = 0; i < note.Elements.length; i++)
    {
        switch (note.Elements[i].Key)
        {
            case "title":
                addTitle(note.Elements[i].Value);
                break;
            case "text-plain":
                addTextPlain(note.Elements[i].Value);
                break;
            case "link":
                var label = "";

                // Loop over meta to find label
                for (var j = 0; j < note.Elements[i].Meta.length; j++)
                {
                    switch (note.Elements[i].Meta[j].Key)
                    {
                        case "label":
                            label = note.Elements[i].Meta[j].Value;
                            break;
                    }
                }

                addLink(note.Elements[i].Value, label);
                break;
        }
    }

    refreshBin();
}

function processMode()
{
    var editMode = $("#edit-mode").prop('checked');

    if (editMode == true)
    {
        mode = "edit";
        $("#tool-area").collapse("show");
    }
    else
    {
        mode = "read";
        $("#tool-area").collapse("hide");
    }
}

function processKeywords(str)
{
    var words = str.split(" ");
    var newWords = "";
    
    for (var i = 0; i < words.length; i++) 
    {
        var keywordFound = false;
        // keyword loop
        for (var j = 0; j < keywords.length; j++)
        {
            if (words[i].toLowerCase() == keywords[j].Keyword)
            {
                newWords += `<a href="/notes/k/` + words[i].toLowerCase() + `" class="keyword">` + words[i] + `</a> `;
                keywordFound = true;
                break; // out of keyword loop
            }
        }

        if (!keywordFound)
        {
            newWords += words[i] + " ";
        }
    }

    return newWords;
}

function refreshBin()
{
    // Remove element
    $(".bin").on('click', function(e)
    {
        $(this).closest(".bin-group").remove();
    });
}

function ucFirst(str) 
{
  if (!str) return str;

  return str[0].toUpperCase() + str.slice(1);
}

</script>

{{template "footer" . }}
{{end}}
