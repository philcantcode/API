{{define "viewer"}}
{{template "header" . }}

<div class="row-flex buffer-top">
    <div class="btn-group btn-group-toggle col-12" data-toggle="buttons">
        <label class="btn btn-secondary btn-sm">
          <input class="mode-checks" type="radio" name="options" id="read-mode" autocomplete="off" checked> Read Mode
        </label>
        <label class="btn btn-secondary btn-sm">
          <input class="mode-checks" type="radio" name="options" id="edit-mode" autocomplete="off"> Edit Mode
        </label>
    </div>
</div>

<div id="meta-elements" class="row-flex buffer-top">
    
</div>

<div id="note-elements" class="row-flex jumbotron jumbotron-flex">

</div>

<div id="tool-area" class="row-flex collapse">
    <h6>Add new page element</h6>
    <div class="btn-group" role="group">
        <button onclick="addHeader()" type="button" class="btn btn-secondary">Header</button>
        <button onclick="addTextPlain()" type="button" class="btn btn-secondary">Text</button>
        <button type="button" class="btn btn-secondary">Image</button>
        <button type="button" class="btn btn-secondary">File</button>
        <button onclick="addLink()" type="button" class="btn btn-secondary">Link</button>
    </div>

    <div class="btn-group" role="group">
        <button onclick="save()" type="button" class="btn btn-success">Save</button>
    </div>

    <div class="btn-group" role="group">
        <button onclick="del()" type="button" class="btn btn-danger">Delete</button>
    </div>

</div>

<script type="text/javascript" src="/notes/js/elements.js"></script>
<script type="text/javascript" src="/notes/js/server.js"></script>

<script type="text/javascript">

var mode = "read"; // or edit
var note = JSON.parse(`{{ .Contents.NoteJson }}`);
var keywords = JSON.parse(`{{ .Contents.Keywords }}`);

console.log(note);
console.log(keywords);

$(window).on('load', function() 
{
    processElements();

    $(".mode-checks:radio").change(function() 
    {
        processMode();
        processElements();
    });

    processMode();
});

function processElements()
{
    $("#meta-elements").empty();
    $("#note-elements").empty();

    addKeyword(note.Keyword);
    addDescription(note.Desc);

    if (note.ID == 0)
        return;

    for (var i = 0; i < note.Elements.length; i++)
    {
        switch (note.Elements[i].Key)
        {
            case "title":
            case "header":
                addHeader(note.Elements[i].Value);
                break;
            case "text-plain":
                addTextPlain(note.Elements[i].Value);
                break;
            case "link":
                var label = "";

                // Loop over meta to find label
                for (var j = 0; j < note.Elements[i].Meta.length; j++)
                {
                    switch (note.Elements[i].Meta[j].Key)
                    {
                        case "label":
                            label = note.Elements[i].Meta[j].Value;
                            break;
                    }
                }

                addLink(note.Elements[i].Value, label);
                break;
        }
    }

    refreshBin();
}

function processMode()
{
    var editMode = $("#edit-mode").prop('checked');

    if (editMode == true)
    {
        mode = "edit";
        $("#tool-area").collapse("show");
    }
    else
    {
        mode = "read";
        $("#tool-area").collapse("hide");
    }
}

function processKeywords(str)
{
    var words = str.split(" ");
    var newWords = "";
    var skipToWord = -1;
    
    for (var i = 0; i < words.length; i++) 
    {
        var keywordFound = false;
        
        if (skipToWord > i)
            continue;

        // keyword loop
        for (var j = 0; j < keywords.length; j++)
        {
            var key = keywords[j].Keyword.split(" "); // Keyword
            var lowCaseWord = words[i].toLowerCase(); // Lowercase <p> word
            var caseWord = words[i];  // <p> word with default casing

            if (key.length == 1)
            {
                
                if (lowCaseWord == key[0])
                {
                    newWords += `<a href="/notes/k/` + lowCaseWord + `" class="keyword">` + caseWord + `</a> `;
                    keywordFound = true;
                    skipToWord = -1;
                    break; // out of keyword loop
                }
            }
            else // Handles the case where there's multiple words in the key
            {
                var perfectMultiKeyMatch = true;
                var perfectMultiMatchStr = "";

                // Handle the case where the word is longer than the keyword
                if (key.length > words.length)
                {
                     break;
                }

                // Loop over each component in key
                for (var k = 0; k < key.length; k++)
                {
                    var compWord = words[i + k].replace(/(\r\n|\n|\r)/gm, "").toLowerCase();
                    
                    if (compWord == key[k])
                    {
                        perfectMultiMatchStr += words[i + k] + " ";
                        skipToWord = i + k + 1; // next word
                    }
                    else
                    {
                        perfectMultiKeyMatch = false;
                        skipToWord = -1;
                        break;
                    }
                }

                if (perfectMultiKeyMatch)
                {
                    perfectMultiMatchStr = perfectMultiMatchStr.substring(0, perfectMultiMatchStr.length - 1);
                    newWords += `<a href="/notes/k/` + perfectMultiMatchStr.toLowerCase() + `" class="keyword">` + perfectMultiMatchStr + `</a> `;
                    keywordFound = true;
                }
            }
        }

        if (!keywordFound)
        {
            newWords += words[i] + " ";
        }
    }

    return newWords;
}

function refreshBin()
{
    // Clear old on-clicks
    $(".bin").prop("onclick", null).off("click");
    $(".up").prop("onclick", null).off("click");
    $(".down").prop("onclick", null).off("click");

    // Remove element
    $(".bin").on('click', function(e)
    {
        $(this).closest(".bin-group").remove();
    });

    $(".up").on("click", function(e) 
    {
        var currentElement = $(this).closest(".bin-group");
        var aboveElement = currentElement.prev();

        currentElement.insertBefore(aboveElement);
    });

    $(".down").on("click", function(e) 
    {
        var currentElement = $(this).closest(".bin-group");
        var aboveElement = currentElement.next();

        currentElement.insertAfter(aboveElement);
    });
}

function ucFirst(str) 
{
  if (!str) return str;

  return str[0].toUpperCase() + str.slice(1);
}

</script>

{{template "footer" . }}
{{end}}
