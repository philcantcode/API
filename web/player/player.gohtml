{{define "player"}}
{{template "header" . }}

{{ if .Contents.PlayParam.AbsPath }}
<div class="row">
  <h3 col-12>Currently Watching <span id="currently-watching">{{ .Contents.PlayParam.PrintName }}</span></h3>

  <a href="/player/remote?id={{ .Contents.DeviceID }}" type="button" target="_blank" class="col-4 pull-right btn button-sm btn-warning">
    Device ID <span class="badge badge-light">{{ .Contents.DeviceID }}</span>
  </a>

  <div id="error-alert" class="alert alert-danger alert-dismissible col-12 collapse" role="alert">
    <strong>Playback Error</strong> <span id="playback-error"></span>
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>

  <video controls autoplay id="player" width="100%" src="">
    <track label="English subtitles" kind="subtitles" srclang="en" src="" default=""> 
    Your browser does not support the HTML5 Video element.
  </video>
</div>
{{ end }}

<div class="row buffer-top">
    <div class="col-12">
        <h3>Which media do you want to play?</h3>
    </div>

    <div class="list-group col-md-4 pull-left">
        <div class="btn-group pull-left" role="group">
            <button id="continue-watching" type="button" class="btn btn-outline-dark dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Continue Watching
            </button>
            
            <div class="dropdown-menu" aria-labelledby="continue-watching">
                {{range .Contents.RecentlyPlayed}}
                    <a href="?play={{ .File.AbsPath }}&open={{ .File.Path }}" class="dropdown-item">{{ .Title }}</a>
                {{end}}
            </div>
        </div>

        {{range .Contents.Directories}}
            <a href="?open={{ .AbsPath }}" class="list-group-item list-group-item-action">{{ .AbsPath }}</a>
        {{end}}
    </div>  

    <div class="list-group col-md-8 pull-left">
        {{ if .Contents.SafeOpenParam }}
        <button id="ffmpeg-priority" class="btn btn-outline-dark pull-right">Prioritise Folder for FFMPEG Conversion</button>
        {{ end }}

        {{range .Contents.SubFolders}}
            <a href="?open={{ .AbsPath }}" class="list-group-item list-group-item-action">{{ .AbsPath }}</a>
        {{end}}

        {{range .Contents.Files}}
            <a href="?play={{ .AbsPath }}&open={{ $.Contents.OpenParam }}" class="list-group-item list-group-item-action"><span class="fa fa-play-circle"></span> {{ .FileName }}{{ .Ext }}</a>
        {{end}}
    </div>
</div>

{{ if .Contents.PlayParam.AbsPath }}
<script type="text/javascript">
  var wsurl = "{{ .Contents.IP }}:{{ .Contents.Port }}";
  var url = "http://" + wsurl;
  var devID = "{{ .Contents.DeviceID }}";

  var socket = new WebSocket("ws://" + wsurl + "/player/ws-setup/player/{{ .Contents.DeviceID }}");

  var player = document.getElementById("player");
  var rewindAmount = 10;
  var pauseStatusPlayback = true;
  var loadedMedia = "{{ .Contents.SafePlayParam }}";

  // Once the socket opens, setup the media player
  socket.onopen = function(e) 
  {
      socket.send(JSON.stringify({
          Type: "control",
          Key: "change-media",
          Value: loadedMedia
      }));

      window.setInterval(function()
      { 
          if (!player.paused && !pauseStatusPlayback)
          {
              console.log("status:playback:" + player.currentTime);
              socket.send(JSON.stringify({
                  Type: "status",
                  Key: "playback",
                  Value: String(player.currentTime)
              }));
          }
      }, 10000);

      $("#media-list").click();
      $("#continue-watching").click();
  };

  // Incoming messages back to the player
  socket.onmessage = function(msg) 
  {
      if (msg.data.length > 0)
      {
          var response = JSON.parse(msg.data);
          console.log("Player Received: " + msg.data);

          switch(response.Key) 
          {
              case "play":
                    player.play();
                    break;
              case "pause":
                    player.pause();
                    break;
              case "rewind":
                    fastforward(-parseInt(val));
                    break;
              case "fastforward":
                    fastforward(parseInt(val));
                    break;
              case "change-media":
                    changeMedia(response.Playback.ID, response.Playback.Playtime);
                    var prefLoc = parseInt(response.Playback.PrefLoc);
                    $("#currently-watching").text(response.Playback.Locations[prefLoc].PrintName);
                    loadedMedia = response.Playback.Locations[prefLoc].AbsPath;
                    console.log("Loaded Media: " + loadedMedia);
                    break;
              case "change-media-fail":
                    $("#playback-error").text("Couldn't change to the next media, none found in folder.");
                    $("#error-alert").show();
                    break;
              case "no-media-on-disk":
                    $("#playback-error").text("Couldn't load media, no files on disk, insert drives.");
                    $("#error-alert").show();
                    break;
          }
      }
  };

  $(document).ready(function() 
  {
      $("#media-list").click();
  });

  $("#player").bind("ended", function() 
  {
      socket.send(JSON.stringify({
          Type: "control",
          Key: "skip"
      }));
  });

  // Key functions
  $(document).on("keydown", function (e) 
  {
      switch(e.key)
      { 
          case "Enter":
                socket.send(JSON.stringify({
                    Type: "control",
                    Key: "skip",
                    Value: ""
                }));
              break;
      } 
  });

  // Fast forward (or rewind) the player
  function fastforward(val)
  {
      player.currentTime = (player.currentTime + val);
  }

  // Skip to the next media
  function changeMedia(id, playtime)
  {
        console.log("Changing media to: " + id)
        pauseStatusPlayback = true;
        // Stop the current media
        player.pause();
        player.setAttribute("src", "");
        player.load();

        player.setAttribute("src", "/player/load?devID=" + devID + "&id=" + id + "#t=" + playtime);
        player.load();
        player.play();
        pauseStatusPlayback = false;
  }
</script>
{{ end }}

<script type="text/javascript">
  $("#ffmpeg-priority").on("click", function(e)
  {
    $.ajax({
        url: "/player/ffmpeg/control",
        type: "get",
        data: { 
          type: "prioritise",
          prioritise: "{{ .Contents.SafeOpenParam }}"
        },
        success: function(response) {
         
        },
        error: function(xhr) {
         
        }
    });

    console.log("Priority");
  });
</script>
{{template "footer" . }}
{{end}}
